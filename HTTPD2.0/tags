!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BAD_REQUEST	http_conn.h	/^    enum HTTP_CODE { NO_REQUEST, GET_REQUEST, BAD_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
CHECK_STATE	http_conn.h	/^    enum CHECK_STATE { CHECK_STATE_REQUESTLINE = 0,$/;"	g	class:http_conn
CHECK_STATE_CONTENT	http_conn.h	/^                       CHECK_STATE_CONTENT };$/;"	e	enum:http_conn::CHECK_STATE
CHECK_STATE_HEADER	http_conn.h	/^                       CHECK_STATE_HEADER,$/;"	e	enum:http_conn::CHECK_STATE
CHECK_STATE_REQUESTLINE	http_conn.h	/^    enum CHECK_STATE { CHECK_STATE_REQUESTLINE = 0,$/;"	e	enum:http_conn::CHECK_STATE
CLOSED_CONNECTION	http_conn.h	/^                     INTERNAL_ERROR, CLOSED_CONNECTION$/;"	e	enum:http_conn::HTTP_CODE
CONNECT	http_conn.h	/^                  TRACE, OPTIONS, CONNECT, PATCH};$/;"	e	enum:http_conn::METHOD
DELETE	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	e	enum:http_conn::METHOD
FILENAME_LEN	http_conn.h	/^    static const int FILENAME_LEN = 200;$/;"	m	class:http_conn
FILE_REQUEST	http_conn.h	/^                     NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
FORBIDDEN_REQUEST	http_conn.h	/^                     NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
GET	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	e	enum:http_conn::METHOD
GET_REQUEST	http_conn.h	/^    enum HTTP_CODE { NO_REQUEST, GET_REQUEST, BAD_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
HEAD	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	e	enum:http_conn::METHOD
HTTP_CODE	http_conn.h	/^    enum HTTP_CODE { NO_REQUEST, GET_REQUEST, BAD_REQUEST,$/;"	g	class:http_conn
INTERNAL_ERROR	http_conn.h	/^                     INTERNAL_ERROR, CLOSED_CONNECTION$/;"	e	enum:http_conn::HTTP_CODE
LINE_BAD	http_conn.h	/^    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN};$/;"	e	enum:http_conn::LINE_STATUS
LINE_OK	http_conn.h	/^    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN};$/;"	e	enum:http_conn::LINE_STATUS
LINE_OPEN	http_conn.h	/^    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN};$/;"	e	enum:http_conn::LINE_STATUS
LINE_STATUS	http_conn.h	/^    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN};$/;"	g	class:http_conn
MAX_EVENT_NUMBER	main.cpp	19;"	d	file:
MAX_FD	main.cpp	18;"	d	file:
METHOD	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	g	class:http_conn
NO_REQUEST	http_conn.h	/^    enum HTTP_CODE { NO_REQUEST, GET_REQUEST, BAD_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
NO_RESOURCE	http_conn.h	/^                     NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
OPTIONS	http_conn.h	/^                  TRACE, OPTIONS, CONNECT, PATCH};$/;"	e	enum:http_conn::METHOD
PATCH	http_conn.h	/^                  TRACE, OPTIONS, CONNECT, PATCH};$/;"	e	enum:http_conn::METHOD
POST	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	e	enum:http_conn::METHOD
PUT	http_conn.h	/^    enum METHOD { GET = 0, POST, HEAD, PUT, DELETE,$/;"	e	enum:http_conn::METHOD
READ_BUFFER_SIZE	http_conn.h	/^    static const int READ_BUFFER_SIZE = 2048;$/;"	m	class:http_conn
TRACE	http_conn.h	/^                  TRACE, OPTIONS, CONNECT, PATCH};$/;"	e	enum:http_conn::METHOD
WRITE_BUFFER_SIZE	http_conn.h	/^    static const int WRITE_BUFFER_SIZE = 1024;$/;"	m	class:http_conn
__HTTPCINNECTION_H__	http_conn.h	2;"	d
__LOCKER_H__	locker.h	2;"	d
__THREADPOOL_H__	thread_pool.h	2;"	d
add_blank_line	http_conn.cpp	/^bool http_conn::add_blank_line( void )$/;"	f	class:http_conn
add_content	http_conn.cpp	/^bool http_conn::add_content( const char * content )$/;"	f	class:http_conn
add_content_length	http_conn.cpp	/^bool http_conn::add_content_length( int content_len )$/;"	f	class:http_conn
add_headers	http_conn.cpp	/^bool http_conn::add_headers( int content_len )$/;"	f	class:http_conn
add_linger	http_conn.cpp	/^bool add_linger( void )$/;"	f
add_response	http_conn.cpp	/^bool http_conn::add_response( const char * format, ... )$/;"	f	class:http_conn
add_status_line	http_conn.cpp	/^bool http_conn::add_status_line( int status, const char * title ) $/;"	f	class:http_conn
addfd	http_conn.cpp	/^void addfd( int empollfd, int fd, bool one_shot )$/;"	f
addsig	main.cpp	/^void addsig( int sig, void(handler)(int), bool restart = true )$/;"	f
append	thread_pool.h	/^bool threadpool< T >::append( T * request )$/;"	f	class:threadpool
close_conn	http_conn.cpp	/^void http_conn::close_conn( bool real_close )$/;"	f	class:http_conn
cond	locker.h	/^    cond()$/;"	f	class:cond
cond	locker.h	/^class cond{$/;"	c
do_request	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::do_request( void )$/;"	f	class:http_conn
doc_root	http_conn.cpp	/^const char * doc_root = ".\/wwwroot\/index.html";$/;"	v
error_400_form	http_conn.cpp	/^const char * error_400_form = "Your request has bad syntax or is inherently impossible to satisfy.\\n";$/;"	v
error_400_title	http_conn.cpp	/^const char * error_400_title = "Bad Request";$/;"	v
error_403_form	http_conn.cpp	/^const char * error_403_form = "You do not have permission to get file from this server.\\n";$/;"	v
error_403_title	http_conn.cpp	/^const char * error_403_title = "Forbidden";$/;"	v
error_404_form	http_conn.cpp	/^const char * error_404_form = "The requested file was not found on this server.\\n";$/;"	v
error_404_title	http_conn.cpp	/^const char * error_404_title = "Not Found";$/;"	v
error_500_form	http_conn.cpp	/^const char * error_500_form = "There was an unusual problem serving the requested file.\\n";$/;"	v
error_500_title	http_conn.cpp	/^const char * error_500_title = "Internal Error";$/;"	v
get_line	http_conn.h	/^    char * get_line( void ) { return m_read_buf + m_start_line; }$/;"	f	class:http_conn
http_conn	http_conn.h	/^    http_conn(){}$/;"	f	class:http_conn
http_conn	http_conn.h	/^class http_conn {$/;"	c
init	http_conn.cpp	/^void http_conn::init( int sockfd, const sockaddr_in& addr )$/;"	f	class:http_conn
init	http_conn.cpp	/^void http_conn::init( void )$/;"	f	class:http_conn
lock	locker.h	/^    bool lock()$/;"	f	class:locker
locker	locker.h	/^    locker()$/;"	f	class:locker
locker	locker.h	/^class locker{$/;"	c
m_address	http_conn.h	/^    sockaddr_in m_address;$/;"	m	class:http_conn
m_check_state	http_conn.h	/^    CHECK_STATE m_check_state;$/;"	m	class:http_conn
m_checked_idx	http_conn.h	/^    int m_checked_idx;$/;"	m	class:http_conn
m_cond	locker.h	/^    pthread_cond_t m_cond;$/;"	m	class:cond
m_content_length	http_conn.h	/^    int m_content_length;$/;"	m	class:http_conn
m_epollfd	http_conn.cpp	/^int http_conn::m_epollfd = -1;$/;"	m	class:http_conn	file:
m_epollfd	http_conn.h	/^    static int m_epollfd;$/;"	m	class:http_conn
m_file_address	http_conn.h	/^    char * m_file_address;$/;"	m	class:http_conn
m_file_stat	http_conn.h	/^    struct stat m_file_stat;$/;"	m	class:http_conn	typeref:struct:http_conn::stat
m_host	http_conn.h	/^    char * m_host;$/;"	m	class:http_conn
m_iv	http_conn.h	/^    struct iovec m_iv[2];$/;"	m	class:http_conn	typeref:struct:http_conn::iovec
m_iv_count	http_conn.h	/^    int m_iv_count;$/;"	m	class:http_conn
m_linger	http_conn.h	/^    bool m_linger;$/;"	m	class:http_conn
m_max_request	thread_pool.h	/^    int m_max_request;$/;"	m	class:threadpool
m_method	http_conn.h	/^    METHOD m_method;$/;"	m	class:http_conn
m_mutex	locker.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:cond
m_mutex	locker.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:locker
m_queuelocker	thread_pool.h	/^    locker m_queuelocker;$/;"	m	class:threadpool
m_queuestat	thread_pool.h	/^    sem m_queuestat;$/;"	m	class:threadpool
m_read_buf	http_conn.h	/^    char m_read_buf[ READ_BUFFER_SIZE ];$/;"	m	class:http_conn
m_read_idx	http_conn.h	/^    int m_read_idx;$/;"	m	class:http_conn
m_real_file	http_conn.h	/^    char m_real_file[ FILENAME_LEN ];$/;"	m	class:http_conn
m_sem	locker.h	/^    sem_t m_sem;$/;"	m	class:sem
m_sockfd	http_conn.h	/^    int m_sockfd;$/;"	m	class:http_conn
m_start_line	http_conn.h	/^    int m_start_line;$/;"	m	class:http_conn
m_stop	thread_pool.h	/^    bool m_stop;$/;"	m	class:threadpool
m_thread_number	thread_pool.h	/^    int m_thread_number;$/;"	m	class:threadpool
m_threads	thread_pool.h	/^    pthread_t * m_threads;$/;"	m	class:threadpool
m_url	http_conn.h	/^    char * m_url;$/;"	m	class:http_conn
m_user_count	http_conn.cpp	/^int http_conn::m_user_count = 0;$/;"	m	class:http_conn	file:
m_user_count	http_conn.h	/^    static int m_user_count;$/;"	m	class:http_conn
m_version	http_conn.h	/^    char * m_version;$/;"	m	class:http_conn
m_workqueue	thread_pool.h	/^    std::list< T* > m_workqueue;$/;"	m	class:threadpool
m_write_buf	http_conn.h	/^    char m_write_buf [ WRITE_BUFFER_SIZE ];$/;"	m	class:http_conn
m_write_idx	http_conn.h	/^    int m_write_idx;$/;"	m	class:http_conn
main	main.cpp	/^int main()$/;"	f
main	thread_pool.cpp	/^int main()$/;"	f
modfd	http_conn.cpp	/^void modfd( int epollfd, int fd, int ev )$/;"	f
ok_200_title	http_conn.cpp	/^const char * ok_200_title = "OK";$/;"	v
parse_headers	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::parse_headers( char * text )$/;"	f	class:http_conn
parse_line	http_conn.cpp	/^http_conn::LINE_STATUS http http_conn::parse_line( void )$/;"	f	class:http_conn
parse_request_line	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::parse_request_line( char * text )$/;"	f	class:http_conn
post	locker.h	/^    bool post()$/;"	f	class:sem
process	http_conn.cpp	/^void http_conn::process( void )$/;"	f	class:http_conn
process_read	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::process_read( void )$/;"	f	class:http_conn
process_write	http_conn.cpp	/^bool http_conn::process_write( HTTP_CODE ret )$/;"	f	class:http_conn
read	http_conn.cpp	/^bool http_conn::read( viod )$/;"	f	class:http_conn
removefd	http_conn.cpp	/^void removefd( int epollfd, int fd )$/;"	f
run	thread_pool.h	/^void threadpool< T >::run()$/;"	f	class:threadpool
sem	locker.h	/^    sem()$/;"	f	class:sem
sem	locker.h	/^class sem{$/;"	c
setnonblocking	http_conn.cpp	/^int setnonblocking( int fd )$/;"	f
signal	locker.h	/^    bool signal()$/;"	f	class:cond
threadpool	thread_pool.h	/^class threadpool {$/;"	c
threadpool	thread_pool.h	/^threadpool< T >::threadpool( int thread_num, int max_request )$/;"	f	class:threadpool
unlock	locker.h	/^    bool unlock()$/;"	f	class:locker
wait	locker.h	/^    bool wait()$/;"	f	class:cond
wait	locker.h	/^    bool wait()$/;"	f	class:sem
worker	thread_pool.h	/^void * threadpool< T >::worker( void * arg )$/;"	f	class:threadpool
write	http_conn.cpp	/^bool http_conn::write( void )$/;"	f	class:http_conn
~cond	locker.h	/^    ~cond()$/;"	f	class:cond
~http_conn	http_conn.h	/^    ~http_conn(){}$/;"	f	class:http_conn
~locker	locker.h	/^    ~locker()$/;"	f	class:locker
~sem	locker.h	/^    ~sem()$/;"	f	class:sem
~threadpool	thread_pool.h	/^threadpool< T >::~threadpool()$/;"	f	class:threadpool
